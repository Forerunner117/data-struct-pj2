                                     GRADER

Name of student running submit: Austin Longo
Login of student running submit: aulo9481

Second team member's name (if any):
Second team member's login:

Third team member's name (if any):Ian McLaughlin
Third team member's login:iamc6160

IMPORTANT:  Only one team member should submit their project to the moodle.
If a different teammate must submit, inform me (John Black) via email 
all the details.  Include a complete list of team members, and let me know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the machines in the CSEL or VM?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
Project 2 grade.


Modules:

Board/Chip Module (Ian McLaughlin):


Legality Checking Module (Austin Longo):

  isLegal is a package protected class that contains static methods that can 
  return all possible moves for a certain player, and also whether a move is
  valid or not. 
  class LegalMoves
  
    // isLegal() is a package protected static method that takes a move and a 
    // color as parameters and returns true for a legal move and false for an
    // illegal move.
    // @param m is the move we wish to check for legality
    // @param col is the color of the player making the move
    // @return true if the move is legal, false otherwise
    static boolean isLegal(Move m, int col)

    // possibleMoves() is a package protected static method that takes the 
    // color of the current player and returns a Board object consisting of
    // null pointers (invalid moves) and Chip objects (valid moves). Calls 
    // the isLegal() method. 
    // @param col is the color of the player we wish to consider
    // @return a Board object of Chips indicating possible moves 
    static Board possibleMoves(int col)

Network Checking Module: (Chris Costello)

    // hasNetwork() is a package protected static method that takes a color and
    // returns true if that color has a network on the board, or false is not.
    // @param col is the color of the player we wish to consider
    // @return true to indicate a network was found, or false if not
    static boolean hasNetwork(int col)

    // explore() is a private method that searches the board for potential moves to hop to.
    // @param color is the current chip color that might have a network.
    // @param c is the current chip I'm exploring from.
    // @param length is the amount of hops taken.
    // @param direction is the direction I came from.
    // @return true to indicate a network was found, or false if not
    static boolean explore(int color, Chip c, int length, int direction)

Evaluation / Search Module:



